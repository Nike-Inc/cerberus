
debugActionsEnabled=false
debugChannelLifecycleLoggingEnabled=false

endpoints.port=8080
# The ssl port will only be used if useSsl is set to true, and if useSsl is true then all traffic must be SSL/HTTPS (i.e. you can choose HTTP, or HTTPS, but not both).
endpoints.sslPort=8443
endpoints.useSsl=true

# SSL protocols enabled, should match ALB configuration
cms.ssl.protocolsEnabled="TLSv1.2"

# Number of netty boss threads. This is usually fine at 1
netty.bossThreadCount=1

# Number of netty I/O worker threads. 0 indicates that netty should use the default number of worker threads, which is 2 * [CPU cores in system]
netty.workerThreadCount=0

# The maximum allowed request size in bytes. If netty receives a request larger than this then it will throw a TooLongFrameException. See HttpObjectAggregator.
#   This value is an integer, so the max you can set it to is Integer.MAX_VALUE, which corresponds to 2^31-1, or 2147483647. Since that is around 2 GB it is essentially unlimited.
#   If you have a more reasonable max you want to allow for your app you can set it here, and netty will fail-fast when it sees a request that exceeds that value.
netty.maxRequestSizeInBytes=2147483647

# The netty leak detection level tells netty how aggressively it should look for leaks of reference-counted objects. See https://github.com/netty/netty/wiki/Reference-counted-objects
# The following are your options (descriptions taken from the documentation page). This will be used to set the io.netty.leakDetectionLevel System property before the server is started.
#    DISABLED - disables leak detection completely. Not recommended.
#    SIMPLE - tells if there is a leak or not for 1% of buffers. Default.
#    ADVANCED - tells where the leaked buffer was accessed for 1% of buffers.
#    PARANOID - Same with ADVANCED except that it's for every single buffer. Useful for automated testing phase. You could fail the build if the build output contains 'LEAK:'.
netty.leakDetectionLevel=SIMPLE

# The port to use when connecting to graphite/cyanite. This is the same for every environment so it's here in the defaults. The URL is potentially different though and is specified
#   in each environment's config file separately.
graphite.port=2003
graphite.url=fixme.nikecloud.com

# Whether or not to report to the graphite/cyanite metrics server.
graphite.reporting.enabled=false

# Whether or not to report metrics periodically to the SLF4J logs.
metrics.slf4j.reporting.enabled=false

# Whether or not to report metrics periodically to JMX.
metrics.jmx.reporting.enabled=true

# Whether or not to report metrics periodically to SignalFx.
metrics.signalfx.reporting.enabled=false

# Whether or not to report jvm metrics
metrics.reportJvmMetrics=true

# Whether or not embedded cassandra should start up. If set to disable cassandra then the cassandra endpoint will not function. Disabling cassandra is necessary everywhere
# except local box testing since it is difficult to get working in an AWS/AMI environment and is not worth the time to figure out for this example project.
disableCassandra=true

# This will be replaced at build-time with the version number of the final fat jar artifact.
service.version="@@RELEASE@@"

# Flyway
flyway.schemas=cms
flyway.locations="classpath:com/nike/cerberus/migration"

# MyBatis and DataSource configuration
mybatis.environment.id=prod
mybatis.configuration.mapUnderscoreToCamelCase=true
JDBC.driver=com.mysql.jdbc.Driver
c3p0.initialPoolSize=40
c3p0.minPoolSize=40
c3p0.maxPoolSize=400
c3p0.acquireIncrement=10
c3p0.testConnectionOnCheckin=true
c3p0.idleConnectionTestPeriod=300
c3p0.maxIdleTimeExcessConnections=4200
c3p0.preferredTestQuery=SELECT 1

# Hystrix Configuration
# See https://github.com/Netflix/Hystrix/wiki/Configuration

# KMS Thread Pool Configuration

# Default AWS limit was 1200 shared as of Aug 2017
hystrix.threadpool.KmsEncryptDecrypt.coreSize=1000
hystrix.command.KmsEncrypt.execution.isolation.thread.timeoutInMilliseconds=3000

# Default AWS limit was 5 as of Aug 2017
hystrix.threadpool.KmsCreateKey.coreSize=5
hystrix.command.KmsCreateKey.execution.isolation.thread.timeoutInMilliseconds=2000

# Default AWS limit was 5 as of Aug 2017
hystrix.threadpool.KmsCreateAlias.coreSize=5

# Default AWS limit was 30 as of Aug 2017
hystrix.threadpool.KmsDescribeKey.coreSize=10

# Default AWS limit was 5 as of Aug 2017
hystrix.threadpool.KmsScheduleKeyDeletion.coreSize=5

# Default AWS limit was 30 as of Aug 2017
hystrix.threadpool.KmsGetKeyPolicy.coreSize=10

# Default AWS limit was 5 as of Aug 2017
hystrix.threadpool.KmsPutKeyPolicy.coreSize=5


# Application name
cms.app.name=cms

# Scheduled job configuration
cms.jobs.enabled=true
cms.jobs.initialDelay=1
cms.jobs.initialDelayTimeUnits=minutes
cms.jobs.configuredJobs=[
    {
        "jobClassName": "ExpiredTokenCleanUpJob",
        "repeatCount":  -1,  # repeat indefinitely
        "repeatInterval": 10,
        "repeatTimeUnit": "minutes"
    },
    {
        "jobClassName": "HystrixMetricsProcessingJob",
        "repeatCount":  -1,  # repeat indefinitely
        "repeatInterval": 10,
        "repeatTimeUnit": "seconds"
    },
    {
        "jobClassName": "KmsKeyCleanUpJob",
        "repeatCount": -1,  # repeat indefinitely
        "repeatInterval": 1,
        "repeatTimeUnit": "days"
    },
    {
        "jobClassName": "KpiMetricsProcessingJob",
        "repeatCount": -1,  # repeat indefinitely
        "repeatInterval": 1,
        "repeatTimeUnit": "hours"
    }
]

# Event Processors
#
# Fully qualified classname, will be created with guice and injected into the event processor service
#
# You can add your own here as long as its available on the classpath
# See https://github.com/Nike-Inc/cerberus-util-scripts/blob/master/bash_scripts/start-jar-script.sh#L72
# ex set JVM_BEHAVIOR_ARGS='-cp /opt/cerberus/*.jar' with your jar there.
# You can disable event logging locally or for your specific env by removing the default LoggingEventProcessor
cms.event.processors.com.nike.cerberus.event.processor.LoggingEventProcessor=true

# ExpiredTokenCleanUpJob config
cms.jobs.ExpiredTokenCleanUpJob.maxNumberOfTokensToDeletePerJobRun=2500
cms.jobs.ExpiredTokenCleanUpJob.numberOfTokensToDeletePerBatch=1000
cms.jobs.ExpiredTokenCleanUpJob.batchPauseTimeInMillis=0

# KMS Clean Up Job Config
cms.jobs.KmsCleanUpJob.batchPauseTimeInSeconds=10
cms.jobs.KmsCleanUpJob.deleteKmsKeysOlderThanNDays=30

# Auth token configuration
cms.auth.token.generate.length=64
cms.auth.token.hash.iterations=100
cms.auth.token.hash.keyLength=256
cms.auth.token.hash.algorithm="PBKDF2WithHmacSHA512"

cms.user.token.ttl=1h
cms.user.token.maxRefreshCount=24
cms.iam.token.ttl=1h

# Set to true to make user group permissions case-sensitive, false for case-insensitive
#
# For example:
#   When true, if an SDB grants access to AD group 'Lst-foo', then users in group 'Lst-Foo' will not have access
#   When false, if an SDB grants access to AD group 'Lst-foo', then users in group 'Lst-Foo' will have access
cms.user.groups.caseSensitive=true