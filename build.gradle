/*
 * Copyright (c) 2020 Nike, inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.github.spotbugs.snom.SpotBugsReport

buildscript {
  ext {
    versions = [
      ant: '1.10.13',                   // org.apache.ant:ant-junit
      awsSdkVersion: '1.12.452',        // com.amazonaws:aws-java-sdk-core
      awsEncryptionSdk: '2.4.0',        // com.amazonaws:aws-encryption-sdk-java
      backstopper: '0.15.0',            // com.nike.backstopper:backstopper-spring-web-mvc
      c3p0: '0.9.5.5',                  // com.mchange:c3p0
      caffeine: '3.1.1',                // com.github.ben-manes.caffeine:caffeine
      commonsIo: '2.11.0',              // commons-io:commons-io
      commonsText: '1.10.0',            // org.apache.commons:commons-text
      dependencyCheckGradle: '8.0.2',   // org.owasp:dependency-check-gradle
      findbugsAnnotations: '3.0.1u2',   // com.google.code.findbugs:annotations
      findSecBugs: '1.12.0',            // com.h3xstream.findsecbugs:findsecbugs-plugin
      flyway: '5.2.4',                  // org.flywaydb:flyway-core
      groovy: '4.0.11',                 // org.apache.groovy:groovy-all
      gson: '2.10.1',                   // com.google.code.gson:gson
      guava: '31.1-jre',                // com.google.guava:guava
      hibernationValidation: '7.0.5.Final',       // org.hibernate:hibernate-validator
      jacksonAnnotations: '2.11.1',     // com.fasterxml.jackson.core:jackson-annotations
      jakartaValidationApi: '2.0.2',    // jakarta.validation:jakarta.validation-api
      jakartaXmlBindApi: '3.0.1',       // jakarta.xml.bind:jakarta.xml.bind-api
      javaxEl: '3.0.0',                 // org.glassfish:javax.el
      jaxbRuntime: '4.0.2',             // org.glassfish.jaxb:jaxb-runtime
      jjwt: '0.11.5',                   // io.jsonwebtoken:jjwt-api
      jupiterApi: '5.9.2',              // org.junit.jupiter:junit-jupiter-api
      kork: '7.172.0',                  // io.spinnaker.kork:kork-secrets
      kotlinStdlib: '1.7.20',           // org.jetbrains.kotlin:kotlin-stdlib-common
      lang3: '3.12.0',                  // org.apache.commons:commons-lang3
      logback: '1.4.7',                 // ch.qos.logback:logback-core
      lombok: '1.18.26',                // org.projectlombok:lombok
      metricsCore: '4.2.12',            // io.dropwizard.metrics:metrics-core
      mockitoAll: '1.10.19',            // org.mockito:mockito-all
      mybatis: '3.5.13',                // org.mybatis:mybatis
      mybatisSpring: '2.1.0',           // org.mybatis:mybatis-spring
      mysqlConnector: '8.0.33',         // com.mysql:mysql-connector-j
      okhttp: '4.10.0',                 // com.squareup.okhttp3:okhttp
      okta: '8.2.3',                    // com.okta.sdk:okta-sdk-api
      oktaAuthnSdk: '2.0.10',           // com.okta.authn.sdk:okta-authn-sdk-api
      oktaJwtVerifier: '0.5.7',         // com.okta.jwt:okta-jwt-verifier
      openPojo: '0.9.1',                // com.openpojo:openpojo
      resilience4j: '1.7.1',            // 2 requires java 17  // io.github.resilience4j:resilience4j-all
      restAssured: '5.3.0',             // io.rest-assured:rest-assured-all
      slf4j: '2.0.7',                   // org.slf4j:slf4j-api
      spockCore: '2.3-groovy-4.0',      // org.spockframework:spock-core
      springBoot: '2.7.11',             // org.springframework.boot:spring-boot-dependencies
      tikaCore: '2.7.0',                // org.apache.tika:tika-core
      wingtipsSpringBoot: '0.24.2',     // com.nike.wingtips:wingtips-spring-boot
    ]
  }

  repositories {
    maven {
      url "https://repo.maven.apache.org/maven2"
    }
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    google()
  }

  dependencies {
    classpath "org.owasp:dependency-check-gradle:${versions.dependencyCheckGradle}"
  }
}

plugins {
  id "io.spring.dependency-management" version "1.1.0"
  id "com.github.nbaztec.coveralls-jacoco" version "1.2.15"
  id "com.github.spotbugs" version "5.0.13"
  id "com.diffplug.spotless" version "6.14.1"
}

apply from: 'gradle/owasp-dependency-check.gradle'

allprojects {
  apply plugin: 'java'
  apply plugin: 'groovy'
  apply plugin: 'java-library'
  apply plugin: 'jacoco'
  apply plugin: 'com.github.spotbugs'
  apply plugin: 'com.diffplug.spotless'

  spotless {
    java {
      googleJavaFormat()
    }
  }

  dependencies {
    spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${versions.findSecBugs}"
  }

  spotbugs {
    toolVersion = '4.2.0'
    excludeFilter = file("${rootProject.projectDir}/findbugs-supressions.xml")
  }

  spotbugsMain {
    reports(({
      html {
        enabled = true
        destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        stylesheet = 'fancy-hist.xsl'
      }
      xml {
        enabled = false
      }
    } as Closure<NamedDomainObjectContainer<? extends SpotBugsReport>>))
  }

  spotbugsTest {
    reports(({
      html {
        enabled = true
        destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
        stylesheet = 'fancy-hist.xsl'
      }
      xml {
        enabled = false
      }
    } as Closure<NamedDomainObjectContainer<? extends SpotBugsReport>>))
  }



  repositories {
    mavenCentral()
    google()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  jacoco {
    toolVersion = "0.8.5"
  }
}

subprojects {
  apply plugin: 'io.spring.dependency-management'

  sourceCompatibility = '11'

  sourceSets {
    integrationTest {
      java {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        srcDir file('src/integration-test/java')
      }
      groovy {
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
        srcDir file('src/integration-test/groovy')
      }
      resources.srcDir file('src/integration-test/resources')
    }
  }

  configurations {
    integrationTestCompile.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
  }

  //noinspection GroovyAssignabilityCheck
  task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
  }

  dependencyManagement {
    imports {
      mavenBom("org.springframework.boot:spring-boot-dependencies:${versions.springBoot}")
    }
  }

  dependencies {
    // Lombok
    compileOnly "org.projectlombok:lombok:${versions.lombok}"
    annotationProcessor "org.projectlombok:lombok:${versions.lombok}"

    // common test deps
    testImplementation "org.apache.groovy:groovy-all:${versions.groovy}"
    testImplementation "org.spockframework:spock-core:${versions.spockCore}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.jupiterApi}"
    testImplementation "org.mockito:mockito-all:${versions.mockitoAll}"
    testImplementation "com.openpojo:openpojo:${versions.openPojo}"
  }

  test {
    testLogging {
      events "passed", "skipped", "failed"
    }
  }

  integrationTest {
    testLogging {
      showStandardStreams = true
    }
  }
}

List<String> blackList = [
  'cerberus-api-tests'
]
def publishedProjects = subprojects.findAll { !blackList.contains(it.path) }

task jacocoMerge(type: JacocoMerge) {
  publishedProjects.each { subproject ->
    executionData subproject.tasks.withType(Test)
  }
  doFirst {
    executionData = files(executionData.findAll { it.exists() })
  }
}

task aggregatedJacocoReport(type: JacocoReport, group: 'Coverage reports') {
  description = 'Generates an aggregate report from all subprojects'
  dependsOn publishedProjects.test, jacocoMerge

  additionalSourceDirs.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
  sourceDirectories.from = files(publishedProjects.sourceSets.main.allSource.srcDirs)
  classDirectories.from = files(publishedProjects.sourceSets.main.output)
  executionData jacocoMerge.destinationFile

  reports {
    html.enabled = true // human readable
    xml.enabled = true // required by coveralls
  }
}

coverallsJacoco {
  reportSourceSets = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
  reportPath = "${buildDir}/reports/jacoco/aggregatedJacocoReport/aggregatedJacocoReport.xml"
}

configurations {
  antJUnit
}

dependencies {
  antJUnit "org.apache.ant:ant-junit:${versions.ant}"
  runtimeOnly "org.apache.ant:ant-antlr:${versions.ant}"

}

// Compile all the test results into a single one.
task aggregatedJunitXml {
  ant.taskdef(name: 'junitreport', classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator', classpath: configurations.antJUnit.asPath)
  dependsOn subprojects*.test
  doFirst {
    ///reports/jacoco/test/jacocoTestReport.xml
    mkdir "$buildDir/reports/jacoco/test"
    ant.junitreport(todir: "$buildDir/reports/jacoco") {
      subprojects.each {
        if (it.testResultsDir.exists()) {
          fileset(dir: it.testResultsDir)
        }
      }
    }
  }
}

task aggregatedJunitHtml(type: TestReport) {
  dependsOn subprojects*.test
  destinationDir = file("$buildDir/reports/allTests")
  // Include the results from the `test` task in all sub projects
  reportOn subprojects*.test
}

task generateAggregatedReports(dependsOn: [
  aggregatedJunitXml,
  aggregatedJunitHtml,
  aggregatedJacocoReport,
  dependencyCheckAggregate
]) {
  doLast {
    println "Finished generating aggregated reports"
  }
}

task aggregatedTest {
  dependsOn subprojects*.test
}

task aggregatedCheck {
  dependsOn subprojects*.check
}

task aggregatedClean {
  dependsOn subprojects*.clean
}

defaultTasks ':cerberus-web:bootRun'
