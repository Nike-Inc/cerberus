/*
 * Copyright (c) 2016 Nike, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.typesafe.config.ConfigFactory

buildscript {
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

plugins {
    id "org.flywaydb.flyway" version "4.0.3"
    id "com.moowork.node" version "1.2.0"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'embedded-mysql'
apply plugin: 'com.wiredforcode.spawn'

sourceCompatibility = 1.8
targetCompatibility = 1.8

apply from: file('gradle/dependencies.gradle')
apply from: file('gradle/check.gradle')
apply from: file('gradle/integration.gradle')

group = groupId // Necessary for the maven install task to function correctly

shadowJar {
    classifier = ''
    version = ''
}

build {
    try {
        // Create a *-local-overrides.conf properties file if it doesn't already exist.
        def filePath = project.getRootDir().getAbsolutePath()
        filePath += "/src/main/resources"
        String filename = "$rootProject.name-local-overrides.conf"
        File localPropertiesOverrideFile = new File("$filePath/$filename")
        if (!localPropertiesOverrideFile.exists()) {
            println("The $filename file does not exist. Creating an empty file for it at location: " + localPropertiesOverrideFile.getAbsolutePath())
            boolean success = localPropertiesOverrideFile.createNewFile()
            if (success)
                localPropertiesOverrideFile << "# Add local environment overrides for your machine here - this is not checked into git, so you can set any properties you want without affecting other people\n\n"
            else
                println("Unable to create the $filename file at location " + localPropertiesOverrideFile.getAbsolutePath() + ". Please create it manually")
        }
    } catch (Throwable t) {
        logger.lifecycle("Failed to create local conf", t)
    }
}

processResources{
    dependsOn 'copyDashboardResources'

    doFirst {
        project.ext.puppetRepository="maven"
        project.ext.packaging="jar"
        logger.lifecycle("The Executable jar will be created with name ${rootProject.name}.jar")
    }

    // Copy all the files under ami. The default is resources
    from "src/main/ami"
}

test {
    systemProperty '@appId' , rootProject.name
    systemProperty '@environment' , 'local'
}

artifacts {
    archives shadowJar
}

jar {
    dependsOn 'antReplace', 'copyDashboardResources'
    doFirst {
        archiveName 'cms.jar'
    }

    manifest {
        attributes(
                'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
                'Main-Class': 'com.nike.cerberus.Main'
        )
    }
}

def config = ConfigFactory.parseFile(new File("${project.getRootDir().absolutePath}${File.separator}src${File.separator}main${File.separator}resources${File.separator}cms-local-overrides.conf"))

project.ext {
    flyway.user = config.hasPath('JDBC.username') ? config.getString('JDBC.username') : 'NOT_SET'
    flyway.password = config.hasPath('JDBC.password') ? config.getString('JDBC.password') : 'NOT_SET'
    flyway.url = config.hasPath('JDBC.url') ? config.getString('JDBC.url') : 'NOT_SET'
}

flyway {
    schemas = ["cms"]
    locations = ["classpath:com/nike/cerberus/migration"]
}

task antReplace() {
    dependsOn 'processResources'
    doLast {
        def releaseVersion = version
        // Add version information to the app's main properties file
        ant.replace(file: "$buildDir/resources/main/" + rootProject.name + ".conf", token: "@@RELEASE@@", value: releaseVersion)

        // Replace version and appname info in logback.groovy so that log messages will be tagged with the correct values.
        ant.replace(file: "$buildDir/resources/main/logback.groovy", token: "@@RELEASE@@", value: releaseVersion)
        ant.replace(file: "$buildDir/resources/main/logback.groovy", token: "@@APPNAME@@", value: artifactId)

        // Placeholder substitution in packer and puppet files.
        def packerFilesForAntReplace = [
                "$buildDir/resources/main/packer/app-specific-jvm-args.sh"
        ]
        for (String fileName : packerFilesForAntReplace) {
            ant.replace(file: fileName, token: "@@SERVICE_NAME@@", value: rootProject.name)
            ant.replace(file: fileName, token: "@@ARCHIVE_NAME@@", value: "${rootProject.name}.jar")
        }
    }
}

task buildDashboard(type: NpmTask, dependsOn: npmInstall) {
    doFirst {
        project.buildDir.mkdirs()
    }
    group 'build'
    args = ['run', 'build']
}

task copyDashboardResources(type: Copy, dependsOn: buildDashboard) {
    def dashboardBuildDirectory = "${project.getRootDir().absolutePath}${File.separator}dashboard${File.separator}build"
    def dashboardResourceFolder = "${project.getRootDir().absolutePath}${File.separator}src${File.separator}main${File.separator}resources${File.separator}dashboard"

    from dashboardBuildDirectory
    into dashboardResourceFolder
}

task  runDashboardAndReverseProxy(type: NodeTask, dependsOn: [npmInstall, copyDashboardResources]) {
    group 'local development'
    description 'Using the Node plugin (embedded node js) Serves the dashboard and runs the reverse proxy so that you can interact with the total composed Cerberus API'

    script = file("${project.getRootDir().absolutePath}${File.separator}dashboard${File.separator}server.js")
    execOverrides {
        it.workingDir = new File("${project.getRootDir().absolutePath}${File.separator}dashboard").absolutePath
    }
}

apply from: file('gradle/develop.gradle')