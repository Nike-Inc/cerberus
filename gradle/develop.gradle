/*
 * Copyright (c) 2017 Nike, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


def nodeServerPort = 8000
def cmsRemoteDebugPort = 5005

buildscript {
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

task start() {
    doLast {
        logger.lifecycle("Starting reverse proxy, dashboard, Vault and MySQL followed by CMS")
    }

    finalizedBy 'startProxyAndDashboardInBackground'
}

task startProxyAndDashboardInBackground(type: SpawnProcessTask) {
    command "${project.getRootDir().absolutePath}${File.separator}gradlew runDashboardAndReverseProxy --stacktrace"
    ready "express server listing on port $nodeServerPort"
    pidLockFileName '.proxy-dash.pid.lock'

    finalizedBy 'startVaultAndMySQLInBackground'
}

task startMySQLInBackground(type: SpawnProcessTask) {
    command "${project.getRootDir().absolutePath}${File.separator}gradlew sEM --stacktrace"
    ready 'core: post-unseal setup complete'
    pidLockFileName '.vault-sql.pid.lock'
}

task stop () {
    finalizedBy 'stopProxyAndDashboardBackgroundThread'
}

task stopProxyAndDashboardBackgroundThread(type: KillProcessTask) {
    pidLockFileName '.proxy-dash.pid.lock'
}

/**
 * Configure the Node plugin to run out of the dashboard dir
 */
node {
    File dashboardDir = new File("${project.projectDir}${File.separator}dashboard")
    workDir = dashboardDir
    npmWorkDir = dashboardDir
    nodeModulesDir = dashboardDir
}

/**
 * Runs the CMS web server
 */
task runCMS(dependsOn: [antReplace, assemble], ) {
    group 'local development'
    description 'Runs CMS assuming that the runVaultAndMySQL task has been executed and is running in a seperate ' +
            'thread, configuring CMS automatically to integrate with the local in mem Vault'

    doLast {
        javaexec {
            classpath = sourceSets.main.runtimeClasspath
            main = 'com.nike.cerberus.Main'
            systemProperty '@appId', 'cms'
            systemProperty '@environment', 'local'

            // copy aws creds if they exist as sys props
            def accessKey = 'aws.accessKeyId'
            if (System.hasProperty(accessKey)) {
                systemProperty accessKey, System.getProperty(accessKey)
            }
            def secretKey = 'aws.secretKey'
            if (System.hasProperty(accessKey)) {
                systemProperty secretKey, System.getProperty(secretKey)
            }

            jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$cmsRemoteDebugPort"
        }
    }
}

/**
 * Configures the embedded mysql plugin to use the data provided in
 * src/main/resources/cms-local-overrides.conf
 */
embeddedMysql {
    url = flyway.url
    username = flyway.user
    password = flyway.password
}
