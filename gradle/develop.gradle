/*
 * Copyright (c) 2017 Nike, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


def cmsRemoteDebugPort = 5005

buildscript {
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

task startMysqlAndDashboard(type: SpawnProcessTask) {
    command "${project.getRootDir().absolutePath}${File.separator}gradlew startEmbeddedMysql runDashboardAndReverseProxy --stacktrace"
    ready 'successfully started MySQL and Dashboard'
    pidLockFileName '.sql-dashboard.pid.lock'
}

task startMysqlAndCms(type: SpawnProcessTask) {
    command "${project.getRootDir().absolutePath}${File.separator}gradlew startEmbeddedMysql runCMS --stacktrace"
    ready 'successfully started MySQL and CMS'
    pidLockFileName '.sql-cms.pid.lock'
}

task runDashboardAndReverseProxy(type: NodeTask, dependsOn: [npmInstall, copyDashboardResources]) {
    group 'local development'
    description 'Using the Node plugin (embedded node js) Serves the dashboard and runs the reverse proxy so that you can interact with the total composed Cerberus API'

    script = file("${project.getRootDir().absolutePath}${File.separator}dashboard${File.separator}server.js")
    execOverrides {
        it.workingDir = new File("${project.getRootDir().absolutePath}${File.separator}dashboard").absolutePath
    }
}

/**
 * Configure the Node plugin to run out of the dashboard dir
 */
node {
    File dashboardDir = new File("${project.projectDir}${File.separator}dashboard")
    workDir = dashboardDir
    npmWorkDir = dashboardDir
    nodeModulesDir = dashboardDir
}

task debugCMS(dependsOn: [antReplace, assemble]) {
    group 'local development'
    description 'Runs CMS from it\'s JAR (assuming that MySQL Server is already running)'

    doLast {
        javaexec {
            // copy aws creds if they exist as sys props
            def accessKey = 'aws.accessKeyId'
            if (System.hasProperty(accessKey)) {
                systemProperty accessKey, System.getProperty(accessKey)
            }
            def secretKey = 'aws.secretKey'
            if (System.hasProperty(accessKey)) {
                systemProperty secretKey, System.getProperty(secretKey)
            }

            def buildDir = "${project.getBuildDir().absolutePath}"

            systemProperty '@appId', 'cms'
            systemProperty '@environment', 'local'

            main = "-jar"
            args = [
                "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=$cmsRemoteDebugPort",
                "$buildDir${File.separator}libs${File.separator}${rootProject.name}.jar"
            ]
        }

    }
}

/**
 * Runs the CMS web server
 */
task runCMS(dependsOn: [antReplace, assemble], ) {
    group 'local development'
    description 'Runs CMS assuming that MySql Server is already running. MySQL can be started with the '

    doLast {
        javaexec {
            classpath = sourceSets.main.runtimeClasspath
            main = 'com.nike.cerberus.Main'
            systemProperty '@appId', 'cms'
            systemProperty '@environment', 'local'

            // copy aws creds if they exist as sys props
            def accessKey = 'aws.accessKeyId'
            if (System.hasProperty(accessKey)) {
                systemProperty accessKey, System.getProperty(accessKey)
            }
            def secretKey = 'aws.secretKey'
            if (System.hasProperty(accessKey)) {
                systemProperty secretKey, System.getProperty(secretKey)
            }

            jvmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=$cmsRemoteDebugPort"
        }
    }
}

/**
 * Configures the embedded mysql plugin to use the data provided in
 * src/main/resources/cms-local-overrides.conf
 */
embeddedMysql {
    url = flyway.url
    username = flyway.user
    password = flyway.password
}
